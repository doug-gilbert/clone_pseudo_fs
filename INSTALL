Note:
The source for clone_pseudo_fs is written in C++ and expects (almost)
full compliance with the C++20 standard (from 2020). This means GCC
version 12 is problematic. GNU cannot claim compliance with C++20
(with a straight face) if they don't support std::format .
So g++ version 13 or later is required; for clang: version 16 or later
is required. Obviously this is a relatively common problem and there is
a solution. Both g++ version 12 or clang++ version 15 can be supported
if 'libfmt' is available. On Debian/Ubuntu use 'apt install libfmt-dev'
to install the libfmt library and its associated header file.

To build:
 $ ./autogen.sh
 $ ./configure
 $ make

To install call:
 $ make install
This will most likely need superuser privilege. The executable is placed
in the /usr/local/bin directory while the man page is placed in the
/usr/local/man/man8 directory. The install directory is controlled by
the PREFIX variable in the Makefile. To install the executable in the
/usr/bin directory use: './configure --prefix=/usr ' instead.

To uninstall the executable and man page call:
 $ make uninstall

To clean out object and executable files from the working directory call:
 $ make clean

To clean out prior to making a tarball (so ./configure needs to be run
on the target system):
 $ make distclean

Rpms are also available. A clone_pseudo_fs.spec file is included in the
tarball to facilitate building rpms. One way of doing this on a RedHat
system is to place the tarball of the
form: 'clone_pseudo_fs-%{version}.tar.gz' in the
/usr/src/redhat/SOURCE directory and the spec file in the
/usr/src/redhat/SPEC directory. Then
execute: 'rpmbuild -ba clone_pseudo_fs.spec' from the "SPEC"
directory. [Specifying the target may
help (e.g. 'rpmbuild --target=x86_64 -ba clone_pseudo_fs.spec') . If
successful that will deposit the binary rpm in the
/usr/src/redhat/RPMS/x86_64 directory and the source rpm in the
/usr/src/redhat/SRPMS directory. Building an rpm on Suse is similar
(although they use their name rather than "redhat" in the above paths).


To build a Linux debian "deb" (binary) package, first untar the tarball,
then change directory to the top level within the clone_pseudo_fs source.
Then:
 # chmod +x debian/rules
 # dpkg-buildpackage -b -rfakeroot
The binary deb packages will be placed in the parent directory (of
the clone_pseudo_fs source directory) if all goes well.
There is a build_debian.sh script in the tarball's top level directory
that does the above.

Douglas Gilbert
8 October 2023
