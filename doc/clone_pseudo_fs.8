.TH CLONE_PSEUDO_FS "8" "July 2023" "clone_pseudo_fs\-0.90" CLONE_PSEUDO_FS
.SH NAME
clone_pseudo_fs \- clone pseudo file systems like sysfs
.SH SYNOPSIS
.B clone_pseudo_fs
[\fI\-\-destination=DPATH\fR] [\fI\-\-exclude=PAT\fR] [\fI\-\-help\fR]
[\fI\-\-hidden\fR] [\fI\-\-max\-depth=MAXD\fR] [\fI\-\-no\-dst\fR]
[\fI\-\-no\-xdev\fR] [\fI\-\-reglen=RLEN\fR] [\fI\-\-source=SPATH\fR]
[\fI\-\-statistics\fR] [\fI\-\-verbose\fR] [\fI\-\-version\fR]
[\fI\-\-wait=MS_R\fR]
.SH DESCRIPTION
.\" Add any additional description here
The default action is to clone (copy) /sys and below to /tmp/sys . Only that
file system instance is copied (e.g. not /sys/kernel/debug and below).
Hidden files are ignored. Only a maximum of 256 bytes in regular files is
copied. Symbolic links (symlinks), even dangling ones, are also copied. Most
of these defaults can be changed by command line options.
.PP
Why do this? The author's motivation is USB\-C PD information appearing in
sysfs thanks to the ucsi_acpi driver in the Linux kernel. At time of writing
this driver (or ACPI) is unstable, so (dis)connecting a USB\-C cable is often
enough to freeze that driver (which rmmod followed by modprobe sometimes
fixes). Trying to build tools on such an unstable platform is frustrating. So
when a USB\-C PD configuration of interest is correctly reflected in sysfs,
best to clone it, then point the tools under development at the copy. That
copy may have come from a different machine (transferred via tar+scp or
rsync(1) ). Life would be simpler if tools like lsusb and lspci could be
taught to look somewhere other than /sys for the data\-mining they currently
do. Unless such tools are changing something, they don't need to be looking
at a real sysfs instance, something that has the same structure and
attributes (perhaps a little outdated) will do.
.PP
Many horrible things can happen when copying subtrees, especially when SPATH
contains DPATH or vice versa (e.g. cloning /tmp/sys to /tmp/sys/a2). There
are some sanity checks but using the \fI\-\-max\-depth=MAXD\fR is probably
the best defence. Note that some pseudo file systems have waiting reads and
to cope with these the \fI\-\-wait=MS_R\fR option should be used (e.g. when
cloning tracefs usually found under /sys/kernel/trace ). If a pseudo file
system has only a few waiting reads (e.g. procfs has one at /proc/kmsg) then
the \fI\-\-exclude=PAT\fR can be used to bypass the trouble makers.
.PP
Much useful information can be cloned from sysfs in Linux as a non\-root
user. More information will be cloned as root but often that is not useful
information and slows the clone operation a bit. Calling this utility
a "snapshot" copy would be a bit of a stretch as it takes between 5 and
10 seconds on a recent laptop. And that is more than enough time for the
kernel to change many settings within sysfs. Sysfs is a "read\-only" file
system only from the user space perspective, underneath the kernel may be
busily changing things, adding some directories, deleting others. The
recursive directory scan (by default of /sys) uses C++17 filesystem library
machinery and seems quite solid. That said, it is probably best to keep a
system relatively "quiet" while a clone operation of /sys is taking place.
.PP
The utility can be called by a non\-root user with workable results. Most
data\-mining utilities in the "ls*" family are typically designed to obtain
useful results without needing root permissions. So a clone of /sys by a
non\-root user, for example, may be used as alternative input to the "ls*"
family if they have a "\-\-sysroot=" or "\-\-sysfsroot=" option.
Also calling this utility as the root user will take longer and often
run into more "waiting" reads.
.SH OPTIONS
Arguments to long options are mandatory for short options as well. The options
are arranged in alphabetical order based on the long option name. Hyphenated
long options can also take underscore, and vice versa (e.g.
\fI\-\-no\-xdev\fR or \fI\-\-no_xdev\fR) instead.
.TP
\fB\-d\fR, \fB\-\-destination\fR=\fIDPATH\fR
\fIDPATH\fR is the destination of the clone (copy) operation. If it already
exists, it must be a directory (or a symlink to a directory). If it does not
exist, then its parent directory must exist, in which case the \fIDPATH\fR
directory will be created.
.br
The default destination directory is /tmp/sys and per the above rules,
if /tmp exists (it should) and /tmp/sys doesn't exist then the directory
/tmp/sys is created. Once the \fI\-\-source=SPATH\fR option is given then
either this option must be specified or the \fI\-\-no\-dst\fR option must
be given.
.br
It is assumed the \fIDPATH\fR will be in a "normal" storage type file system.
Many pseudo file systems are not useful for general purpose storage by user
space programs (e.g. sysfs; counter example: tmpfs).
.br
A trailing '/' on \fIDPATH\fR is ignored. The long option
\fI\-\-destination=DPATH\fR may be abbreviated to \fI\-\-dst=DPATH\fR .
.TP
\fB\-e\fR, \fB\-\-exclude\fR=\fIPAT\fR
supply one or more file locations in the \fISPATH\fR subtree that will be
excluded from the clone operation. If such a location is a directory, then
the subtree under it is not scanned nor cloned. In this context \fIPAT\fR
stands for "pattern" and the glob(3) system library call is used to match 0
or more file locations that will be excluded.
.br
This option may be given more than once. For example if trying to clone
procfs, then excluding /proc/kmsg is needed, plus excluding all the
process/task directories may help (e.g. \-\-exclude=/proc/[0-9]* ) plus the
/proc/self directory.
.TP
\fB\-h\fR, \fB\-\-help\fR
Output the usage message and exit.
.TP
\fB\-H\fR, \fB\-\-hidden\fR
the default action of this utility is to skip (bypass) files and directories
whose names start with "." . This applies to the recursive directory scan of
\fISPATH\fR. It is a Unix convention to "hide" filenames this way.  There is
often some reason why filenames are hidden and most standard Unix
utilities (e.g. ls) will bypass them unless explicitly asked to include them.
When this option is given hidden filenames are cloned and in the case where a
hidden filename is a directory, then it is descended into.
.TP
\fB\-m\fR, \fB\-\-max\-depth\fR=\fIMAXD\fR
every time the recursive directory scan of \fISPATH\fR descends into a
directory its "depth" is said to increase by one (level). Conversely, when
the scan ascends into its parent directory, the depth decreases by one. The
scan starts at a depth of 0 and, if there are no serious errors, will
complete when the depth is decremented to 0.
.br
This option allows the depth of the recursive directory scan to be limited
to a maximum of \fIMAXD\fR levels. This can be a useful feature when there
is a possibility of infinite recursion (e.g. \fISPATH\fR is /tmp/sys while
\fIDPATH\fR is /tmp/sys/tmp ). Choosing 0 for \fIMAXD\fR will create the
\fIDPATH\fR directory, if it doesn't already exist, then finish the scan.
So it is almost a NOP and may be useful for checking that the command line
options are valid.
.TP
\fB\-D\fR, \fB\-\-no\-dst\fR
this option disables the clone (copy) action to \fIDPATH\fR (or its default
value) that would otherwise occur. The recursive directory scan of
\fISPATH\fR still takes place and about half of the normal statistics are
collected. So this option is useful together with the \fI\-\-statistics\fR
option.
.TP
\fB\-N\fR, \fB\-\-no\-xdev\fR
the find(1) command has an option called \-xdev which will stop its recursive
directory scan leaving the file system instance that it start with. That name
probably comes from the struct stat:st_dev field that is used to implement
its \-xdev functionality.
.br
In this utility the \-xdev functionality is the default action. Hence this
option, \fI\-\-no\-xdev\fR, allows the recursive directory scan to span
multiple file system instances. This option should be used with care.
.TP
\fB\-r\fR, \fB\-\-reglen\fR=\fIRLEN\fR
\fIRLEN\fR is the maximum length. in bytes, that is cloned (copied) from
each each regular file found in \fISPATH\fR to the corresponding file in
\fIDPATH\fR. The default value is 256. The minimum value the \fIRLEN\fR
can be is 0 and values over a million may run into ENOMEM errors. This
action means the this utility is not a good candidate for making a
perfect clone (i.e. preserving all user data) of a general purpose storage
file system.
.br
If \fIRLEN\fR is 0 then regular files under \fIDPATH\fR will be created (if
permitted) but will be of zero length. If that regular file previously
existed under \fIDPATH\fR and had non\-zero length, then its length will now
be truncated to 0.
.TP
\fB\-s\fR, \fB\-\-source\fR=\fISPATH\fR
\fISPATH\fR is the source of the clone (copy) operation. It must already
exist and be either a directory or a symlink to a directory.
.br
The default source directory is /sys . If this option is given then either
the \fI\-\-destination=DPATH\fR option must also be given or the
\fI\-\-no\-xdev\fR option must be given.
.br
The long option \fI\-\-source=SPATH\fR may be abbreviated to
\fI\-\-src=SPATH\fR .
.TP
\fB\-S\fR, \fB\-\-statistics\fR
when this option is given over 30 counters accumulate data that is output
to stdout once the clone operation has been completed (or hits a serious
error). These counters are divided into two groups: the first group is
only collecting data from the recursive directory scan of \fISPATH\fR. The
second group collects data from \fIDPATH\fR operations mainly copying
data from regular files. If the \fI\-\-no\-dst\fR option is also given
then only the first group are output.
.br
The long option \fI\-\-statistics\fR may be abbreviated to \fI\-\-stats\fR .
.TP
\fB\-v\fR, \fB\-\-verbose\fR
increase the level of verbosity, (i.e. debug output).
.TP
\fB\-V\fR, \fB\-\-version\fR
outputs version information then exits.
.TP
\fB\-w\fR, \fB\-\-wait\fR=\fIMS_R\fR
\fIMS_R\fR is the maximum number of milliseconds to wait for a response on
each read(2) of a regular file. If \fIMS_R\fR is reached before there is
a response to the read(2) then a timeout is reported. The corresponding
regular file under \fIDPATH\fR is created and will be zero length; if it
already existed then it will be truncated to zero length. The default
action is to wait indefinitely for 1 or more bytes of response, or an
error to be reported.
.br
When this option is given (including \fIMS_R\fR being 0, which is valid)
the O_NONBLOCK flag is set on the open(2) of the regular file to be
read(2) (i.e. under \fISPATH\fR). Then if the associated read(2) yields
an EAGAIN error (which has a statistics counter) then the poll(2) system
call is invoked. It is possible that a pseudo file system does not properly
implement the poll(2) infrastructure which is why the default (i.e. an
indefinite wait) uses the simplest approach (i.e. no O_NONBLOCK nor
invoking poll(2)).
.br
Additionally using the \fI\-\-verbose\fR option one or more times will
output the filename (under \fISPATH\fR) of any regular file that times
out during its read(2).
.SH NOTES
Some information about sysfs in Linux follows.
Linux calls the regular files is sysfs "attributes". Linux documentation says
that sysfs attributes (i.e. the contents of those regular files) should
be "ASCII text files, preferably with only one value per file. It is noted
that it may not be efficient to contain only one value per file, so  ...
[longer strings are allowed]". The point is those file contents should be
short with ASCII text. Naturally not all attributes comply.
.br
There is a practical reason for the \fI\-\-reglen=RLEN\fR option when the
source is sysfs. In this case the file length given by the stat(2) system
call is fictitious (i.e. a lie), usually 4096 or 0. This makes it hard to
pre\-allocate a buffer to receive the data that the read(2) call actually
fetches. There is a statistics counter called "Number of files \fIRLEN\fR
bytes or longer" which may help indicate if the \fIRLEN\fR setting is too low.
.PP
The /proc/kmsg file has been used as an example of a regular file that has
a waiting read. It also has root\-only permissions so if this utility is
being called to clone /proc as a non\-root user, then /proc/kmsg is not an
issue.
.PP
When cloning devfs (i.e. under /dev ) as a non\-root user, no block or
character special file (device) will be created.
.SH EXAMPLES
When cloning procfs, the recursive directory scan will sometimes fail and
exit while scanning one of the "process identify" (PID) directories which
starts with a digit or /proc/self which is a symlink the the clone_pseudo_fs
instance that is executing. The reason is most likely the scan was in a
PID sub\-tree when that PID was removed. While other information in procfs
may be useful getting a snapshot of, processes (task, threads) running when
the clone was taken doesn't seem particularly worthwhile. So here is an
invocation to exclude those PID directories:
    $ clone_pseudo_fs \-\-src=/proc \-\-dst=/tmp/proc
\-\-exclude='/proc/[0-9]*' \-\-exclude=/proc/self \-\-stats
.PP
The first exclude option needs to be surrounded by quotes to stop the shell
doing a glob expansion before clone_pseudo_fs is called. The second exclude
is arguably not needed as its a symlink to a PID directory that has not been
cloned (due to the first exclude). The above invocation will work for a
non\-root user but seem to wait forever when invoked with root permissions.
The reason is that /proc/kmsg is a waiting read. So the following invocation
will work better:
    $ clone_pseudo_fs \-\-src=/proc \-\-dst=/tmp/proc
\-\-exclude='/proc/[0-9]*' \-\-wait=0 \-\-stats
.PP
Rather than exclude /proc/kmsg explicitly, using \-\-wait=0 will catch
all "waiting" reads. The statistics output will show one source poll timeout
for each waiting read encountered. It is possible that more waiting reads
will be added to procfs in the future.
.SH AUTHOR
Written by Douglas Gilbert
.SH "REPORTING BUGS"
Report bugs to <dgilbert at interlog dot com>.
.SH COPYRIGHT
Copyright \(co 2023 Douglas Gilbert
.br
This software is distributed under a BSD\-2\-Clause license. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.B lsscsi(8),
.B lspci(8),
.B lsusb(8),
.B lsblk(8),
.B lsmem(8),
.B read(2), stat(2) (Linux system calls),
.B C++17 and later: filesystem library
