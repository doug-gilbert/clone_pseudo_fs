.TH CLONE_PSEUDO_FS "8" "September 2023" "clone_pseudo_fs\-0.90" CLONE_PSEUDO_FS
.SH NAME
clone_pseudo_fs \- clone a pseudo file system like sysfs
.SH SYNOPSIS
.B clone_pseudo_fs
[\fI\-\-cache\fR] [\fI\-\-dereference=SPTSYM\fR] [\fI\-\-destination=DPATH\fR]
[\fI\-\-exclude=PATT\fR] [\fI\-\-excl\-fn=EFN\fR]  [\fI\-\-extra\fR]
[\fI\-\-help\fR] [\fI\-\-hidden\fR] [\fI\-\-max\-depth=MAXD\fR]
[\fI\-\-no\-dst\fR] [\fI\-\-no\-xdev\fR] [\fI\-\-prune=PRUN\fR]
[\fI\-\-reglen=RLEN\fR] [\fI\-\-source=SPATH\fR] [\fI\-\-statistics\fR]
[\fI\-\-verbose\fR] [\fI\-\-version\fR] [\fI\-\-wait=MS_R\fR]
.SH DESCRIPTION
.\" Add any additional description here
This is a Linux command line utility specialized for cloning pseudo file
systems such as sysfs which is typically mounted under /sys .
.PP
The default action is to clone (copy) /sys and below to /tmp/sys . Only that
file system instance is copied (e.g. not /sys/kernel/debug and below).
Hidden files are ignored. Only a maximum of 256 bytes in regular files is
copied. Symbolic links (symlinks), even dangling ones, are also copied but
not followed. Most of these defaults can be changed by command line options.
.PP
Why do this? The author's motivation is USB\-C PD information appearing in
sysfs thanks to the ucsi_acpi driver in the Linux kernel. At time of writing
this driver (or ACPI) is unstable, so (dis)connecting a USB\-C cable is often
enough to freeze that driver (which rmmod followed by modprobe sometimes
fixes). Trying to build tools on such an unstable platform is frustrating. So
when a USB\-C PD configuration of interest is correctly reflected in sysfs,
best to clone it, then point the tools under development at the copy. That
copy may have come from a different machine (transferred via tar+scp or
rsync(1) ). Life would be simpler if tools like lsusb and lspci could be
taught to look somewhere other than /sys for the data\-mining they currently
do. Unless such tools are changing something, they don't need to be looking
at a real sysfs instance, something that has the same structure and
attributes (perhaps a little outdated) will do.
.PP
Many horrible things can happen when copying subtrees, especially when
\fISPATH\fR contains \fIDPATH\fR or vice versa (e.g. cloning /tmp/sys
to /tmp/sys/a2). There are some sanity checks but using the
\fI\-\-max\-depth=MAXD\fR is probably the best defence. Note that some pseudo
file systems have waiting reads and to cope with these the \fI\-\-wait=MS_R\fR
option should be used (e.g. when cloning tracefs usually found
under /sys/kernel/trace ). If a pseudo file system has only a few waiting
reads (e.g. procfs has one at /proc/kmsg) then the \fI\-\-exclude=PATT\fR can
be used to bypass the trouble makers.
.PP
Calling this utility a "snapshot" copy would be a bit of a stretch as it
takes between 5 and 10 seconds on a recent laptop. And that is more than
enough time for the kernel to change many settings within sysfs. Sysfs is
a "read\-only" file system only from the user space perspective, underneath
the kernel may be busily changing things, adding some directories, deleting
others. The recursive directory scan (by default of /sys) uses C++17
filesystem library machinery and seems quite solid. That said, it is probably
best to keep a system relatively "quiet" while a clone operation of /sys is
taking place.
.PP
The utility can be called by a non\-root user with workable results. Most
data\-mining utilities in the "ls*" family are typically designed to obtain
useful results without needing root permissions. So a clone of /sys by a
non\-root user, for example, may be used as alternative input to the "ls*"
family if they have a "\-\-sysroot DIR" or "\-\-sysfsroot=DIR" option. Also
calling this utility as the root user will take longer and often run into
more "waiting" reads.
.SH OPTIONS
Arguments to long options are mandatory for short options as well. The options
are arranged in alphabetical order based on the long option name. Hyphenated
long options can also take underscore, and vice versa (e.g.
\fI\-\-no\-xdev\fR or \fI\-\-no_xdev\fR) instead.
.TP
\fB\-c\fR, \fB\-\-cache\fR
perform a two pass clone/copy. The first pass copies the selected directories
to a tree based structure held in ram (memory). Each 'node' in that tree
consumes a little over 120 bytes. The contents of a regular file (see
\fI\-\-reglen=RLEN\fR) is not copied if this option is given once. If this
option is given two or more times, the contents of each regular file is
copied into the memory based tree.
.br
A second pass "unrolls" the in\-memory tree representation into the
destination (i.e. it creates nodes under \fIDPATH\fR).
.br
The reason for a two pass method is that since \fISPATH\fR is assumed to be
a pseudo file system, it could be changing rapidly in response to events in
the system. Since it is not practical to freeze (or lock) a pseudo file
system while it is being cloned, the next best approach is to reduce the time
taken to scan \fISPATH\fR. As a rough estimation, scanning directories is
faster than opening files and is definitely faster than creating new files
and directories.
.TP
\fB\-R\fR, \fB\-\-dereference\fR=\fISPTSYM\fR
\fISPTSYM\fR is assumed to be a symbolic link under \fISPATH\fR. During the
recursive directory scan (of \fISPATH\fR), symbolic links are visited but the
scan does not normally 'descend' into the target of the symbolic link when
that target is itself a directory. When this option is given then for
symbolic links that point to directories, if the link name matches
\fISPTSYM\fR then a new directory is created in the output with the link name
of \fISPTSYM\fR and this utility descends into \fISPTSYM\fR's target name and
copies it. This action is sometimes called a 'deep' copy.
.br
As a convenience, \fISPTSYM\fR may be a symlink to a regular file in which
case in the output a copy of the regular file will be placed in the current
directory with the symlink's link name replacing that symlink.
.br
If \fISPTSYM\fR targets a node that is neither a directory nor a regular
file then this option has no effect. If \fISPTSYM\fR is a "dangling" symlink
then a clone of that dangling symlink will appear in the output.
.br
This option may be given many times, any \fISPTSYM\fR that does not match a
symlink under \fISPATH\fR is discarded, as are duplicates. As soon as a match
is found on a \fISPTSYM\fR argument then that value is discarded from the
list (of \fISPTSYM\fRs) that each symbolic link in the scan is checked
against. This will stop symlink "cycles" causing infinite recursion.
.br
Notice that this option (\fI\-\-dereference=SPTSYM\fR]) only acts on exact
matches on symlinks while the \fI\-\-exclude=PATT\fR option accepts patterns
that are subject to "glob" expansion and can match any type of node.
.br
The long option \fI\-\-dereference=SPTSYM\fR may be shortened to
\fI\-\-deref=SPTSYM\fR .
.br
For more information see the DEREFERENCE AND EXCLUDE section below.
.TP
\fB\-d\fR, \fB\-\-destination\fR=\fIDPATH\fR
\fIDPATH\fR is the destination of the clone (copy) operation. If it already
exists, it must be a directory (or a symlink to a directory). If it does not
exist, then its parent directory must exist, in which case the \fIDPATH\fR
directory will be created.
.br
The default destination directory is /tmp/sys and per the above rules, if /tmp
exists (it should) and /tmp/sys doesn't exist then the directory /tmp/sys is
created. Once the \fI\-\-source=SPATH\fR option is given then either this
option must be specified or the \fI\-\-no\-dst\fR option must be given.
.br
It is assumed the \fIDPATH\fR will be in a "normal" storage type file system.
Most pseudo file systems are not useful for general purpose storage by user
space programs (e.g. sysfs; counter example: tmpfs).
.br
A trailing '/' on \fIDPATH\fR is ignored. The long option
\fI\-\-destination=DPATH\fR may be shortened to \fI\-\-dst=DPATH\fR .
.TP
\fB\-e\fR, \fB\-\-exclude\fR=\fIPATT\fR
supply one or more file locations in the \fISPATH\fR subtree that will be
excluded from the clone operation. If such a location is a directory, then
the subtree under it is not scanned nor cloned. In this context \fIPATT\fR
stands for "pattern" and the glob(3) system library call is used to match
zero or more file locations that will be excluded. Note that \fIPATT\fR
may need to be surrounded by single or double quotes to stop shell
expansion.
.br
This option may be given more than once. For example if trying to clone
procfs, then excluding /proc/kmsg is needed, plus excluding all the
process/task directories may help. For example: \-\-exclude='/proc/[0\-9]*'
\-\-exclude=/proc/self . Note that quotes are not needed around
/proc/self but are needed around '/proc/[0\-9]*' .
.br
Beware: a trailing slash on \fIPATT\fR is a different glob to the same
\fIPATT\fR with the slash removed. In most cases there should not be
a trailing slash. Note that glob expansion takes place well before the
scan of \fISPATH\fR starts and any \fIPATT\fR expressions not matching
file at that time are ignored.
.br
For more information see the DEREFERENCE AND EXCLUDE section below.
.TP
\fB\-E\fR, \fB\-\-excl\-fn\fR=\fIEFN\fR
\fIEFN\fR is a filename with no path component (e.g. 'subsystem'). If
a directory named \fIEFN\fR or a symlink pointing to a directory is
detected, all nodes below it are excluded. In the case of a symlink
the comparison is on the link name, not the target name.
.br
Any type of node can be matched multiple times against the same \fIEFN\fR.
This option may be given multiple times in the same invocation. It can be
used in conjunction with the \fI\-\-exclude=PATT\fR and \fI\-\-prune=PRUN\fR
options to reduce the size of output written to \fIDPATH\fR.
.br
For more information see the DEREFERENCE AND EXCLUDE and ORDER OF EVALUATION
sections below.
.TP
\fB\-x\fR, \fB\-\-extra\fR
does some extra sanity checks which may slow down the clone a little.
.TP
\fB\-h\fR, \fB\-\-help\fR
Output the usage message and exit.
.TP
\fB\-H\fR, \fB\-\-hidden\fR
the default action of this utility is to skip (bypass) files and directories
whose names start with "." Additionally a directory filename starting with
a '.' is not descended (scanned) into. This applies to the recursive
directory scan of \fISPATH\fR. It is a Unix convention to "hide" filenames
this way. There is often some reason why filenames are hidden and most
standard Unix utilities (e.g. ls) will bypass them unless explicitly asked
to list them.
.br
When this option is given hidden filenames are cloned and in the case where a
hidden filename is a directory, then it is descended into.
.br
Note that the special filenames '.' (single character) and '..' (two
characters) do not appear in this recursive scan. They can be thought of as
command line shortcuts rather than real files. That said '..' may appear in
a relative path (e.g. the target name of a symlink) but can (almost) always
be transformed into a 'canonical' pathname that starts at the root (i.e. so
it is absolute (rather than relative)) and contains no symlinks or instances
of '.' or '..' .
.TP
\fB\-m\fR, \fB\-\-max\-depth\fR=\fIMAXD\fR
every time the recursive directory scan of \fISPATH\fR descends into a
directory its "depth" is said to increase by one (level). Conversely, when
the scan ascends into its parent directory, the depth decreases by one. The
scan starts at a depth of 0 and, if there are no serious errors, will
complete when the depth is decremented to 0.
.br
This option allows the depth of the recursive directory scan to be limited
to a maximum of \fIMAXD\fR levels. This can be a useful feature when there
is a possibility of infinite recursion (e.g. \fISPATH\fR is /tmp/sys while
\fIDPATH\fR is /tmp/sys/tmp ). Choosing 0 for \fIMAXD\fR will create the
\fIDPATH\fR directory, if it doesn't already exist, then finish the scan.
So it is almost a NOP and may be useful for checking that the command line
options are valid.
.TP
\fB\-D\fR, \fB\-\-no\-dst\fR
this option disables the clone (copy) action to \fIDPATH\fR (or its default
value) that would otherwise occur. The recursive directory scan of
\fISPATH\fR still takes place and about half of the normal statistics are
collected. So this option is useful together with the \fI\-\-statistics\fR
option.
.br
This option may also be used with the \fI\-\-cache\fR option in which case
the first pass creating the in\-memory tree occurs but the second pass does
not occur.
\fB\-N\fR, \fB\-\-no\-xdev\fR
the find(1) command has an option called \-xdev which will stop its recursive
directory scan leaving the file system instance that it start with. That name
probably comes from the struct stat:st_dev field that is used to implement
its \-xdev functionality.
.br
In this utility the \-xdev functionality is the default action. Hence this
option, \fI\-\-no\-xdev\fR, allows the recursive directory scan to span
multiple file system instances. This option should be used with care as
different file systems often have different characteristics.
.TP
\fB\-p\fR, \fB\-\-prune\fR=\fIPRUN\fR
\fIPRUN\fR should be a path matching a directory, a symlink to a directory,
or a regular file under \fISPATH\fR. All nodes including and below each
matched \fIPRUN\fR directory will appear under \fIDPATH\fR (i.e. the output).
For symlinks matching \fIPRUN\fR and symlinks under a matched \fIPRUN\fR
directory, corresponding symlinks will be placed in the output, even if
their target is dangling. If the symlink target is a directory then its
contents will also be placed in the output. Also the nodes in the canonical
path between \fISPATH\fR and each matching \fIPRUN\fR node (plus each
symlink target directory) will appear in the output. Any node under
\fISPATH\fR _not_ mentioned in this paragraph is excluded from the
output (i.e. under \fIDPATH\fR).
.br
Another way of describing the action of this option is that the output will
contain a directory matching each \fIPRUN\fR, its children, grandchildren,
etc. Additionally any symlink matching \fIPRUN\fR, or amongst thos
children, will be followed to its target directory and its children,
grandchildren, etc will also appear in the output. Finally any regular
file matching \fIPRUN\fR will appear in the output.
.br
This option can be given multiple times. The output will be the union of
each \fI\-\-prune=PRUN\fR option. See the PRUNING and ORDER OF EVALUATION
sections below.
.TP
\fB\-r\fR, \fB\-\-reglen\fR=\fIRLEN\fR
\fIRLEN\fR is the maximum length, in bytes, that is cloned (copied) from each
regular file found in \fISPATH\fR to the corresponding file in \fIDPATH\fR.
The default value is 256. The minimum value the \fIRLEN\fR can be is 0 and
values over a million may run into ENOMEM errors. This action means that this
utility is not a good candidate for making a perfect clone (i.e. preserving
all user data) of a general purpose storage file system.
.br
If \fIRLEN\fR is 0 then regular files under \fIDPATH\fR will be created (if
permitted) but will be of zero length. If that regular file previously
existed under \fIDPATH\fR and had non\-zero length, then its length will now
be truncated to 0.
.br
Note that in pseudo file systems the st_size member returned by invoking
the stat(2) system call on a regular file is misleading. The data read from
a regular file in this context is effectively created at the point that the
read(2) system call is invoked and is not known before that point. Due to
this action the byte length shown 'ls -l' inside a pseudo file system is
wrong (often 0 or 4096). This leads to programs like tar generating this
type of curious warning: "File shrank by 4095 bytes; padding with zeros".
.TP
\fB\-s\fR, \fB\-\-source\fR=\fISPATH\fR
\fISPATH\fR is the source of the clone (copy) operation. \fISPATH\fR must
be an existing directory or a symlink to an existing directory. If it is
a symlink then it is followed before the clone commences.
.br
The default source directory is /sys . That directory is expected to exist
or be a symlink to an existing directory.
.br
If this option is given then either the \fI\-\-destination=DPATH\fR option
must also be given or the \fI\-\-no\-xdev\fR option must be given.
.br
The long option \fI\-\-source=SPATH\fR may be shortened to
\fI\-\-src=SPATH\fR .
.TP
\fB\-S\fR, \fB\-\-statistics\fR
when this option is given over 40 counters accumulate data that is output
to stdout once the clone operation has been completed (or hits a serious
error). These counters are divided into two groups: the first group is
only collecting data from the recursive directory scan of \fISPATH\fR. The
second group collects data from \fIDPATH\fR operations mainly copying
data from regular files. If the \fI\-\-no\-dst\fR option is also given
then only the first group is output.
.br
The long option \fI\-\-statistics\fR may be shortened to \fI\-\-stats\fR .
.TP
\fB\-v\fR, \fB\-\-verbose\fR
increase the level of verbosity, (i.e. debug output).
.TP
\fB\-V\fR, \fB\-\-version\fR
outputs version information then exits.
.TP
\fB\-w\fR, \fB\-\-wait\fR=\fIMS_R\fR
\fIMS_R\fR is the maximum number of milliseconds to wait for a response on
each read(2) system call on a regular file. If \fIMS_R\fR is reached before
there is a response to the read(2) then a timeout is reported. The
corresponding regular file under \fIDPATH\fR is created and will be zero
length; if it already existed then it will be truncated to zero length.
The default action is to wait indefinitely for 1 or more bytes of response,
assuming that no error is reported.
.br
When this option is given (including \fIMS_R\fR being 0, which is valid)
the O_NONBLOCK flag is set on the open(2) of the regular file to be
read(2) (i.e. under \fISPATH\fR). Then if the associated read(2) yields
an EAGAIN error (which has a statistics counter) then the poll(2) system
call is invoked. It is possible that a pseudo file system does not properly
implement the poll(2) infrastructure which is why the default (i.e. an
indefinite wait) uses the simplest approach (i.e. no O_NONBLOCK nor
invoking poll(2)).
.br
Additionally using the \fI\-\-verbose\fR option one or more times will
output the filename (under \fISPATH\fR) of any regular file that times
out during its read(2).
.SH "SYMBOLIC LINKS AND DIRECTORIES"
Most storage file systems have some form of symbolic link (symlink) support.
The DOS FAT file system does not have symlink support and it is still
widely used. A bit like a parachute, symlinks are not needed most of the
time, but in one situation, a parachute is extremely useful.
.PP
In many pseudo file systems, symbolic links play an essential role. In the
case of sysfs in Linux, there is arguably as much information in its
symbolic links, as there is in its regular files.
.PP
Symlinks are a little tricky to handle when cloning a pseudo file system,
especially sysfs, where the hardware is disappearing and re\-appearing (e.g.
when the "uplink" cable between a USB hub and a computer is disconnected
by accident and then reconnected). The clone/copy operations is termed
as "recursive descent" which when a directory is detected in the source,
a directory of the same name is created in the corresponding position of
the destination. The algorithm then "descends" into the source directory
copying each entry into the destination. The "ls \-f" command in Linux shows
the native order in which a directory holds its contents and this is the
order that this utility uses when cloning.
.PP
Symlinks have two parts: its link name and its target name. The target name
is where it "goes" and that location in the destination may not exist for
several reasons. The main reason is that the recursive descent algorithm may
not have reached where the target name points. The other reason is changes
in the underlying hardware which sysfs (for example) is trying to mirror have
removed that target name location. Whatever the reason, so\-called "dangling"
symlinks are always created. In a changing hardware environment the time
between when a symlink is created (using its link name) and resolved (i.e.
when its target name is created) may be measured in seconds, and that
timespan increases the chance that something else has changed.
.PP
If this is indeed found to be a problem, using the
\fI\-\-dereference=SPTSYM\fR option to turn that symlink into a directory
may be considered. As explained above, the "recursive descent" nature of
the clone operation means that the files under a directory are scanned
within milliseconds or less after their parent directory is found.
.SH "DEREFERENCE AND EXCLUDE"
These options are designed so that \fI\-\-dereference=SPTSYM\fR is as narrow
as possible while \fI\-\-exclude=PATT\fR is as broad as possible. The former
increases the size of the clone which will slow the clone operation down.
[Even worse they could lead to cycles which would continue indefinitely,
but the \fI\-\-max\-depth=MAXD\fR option will stop such a cycle, if given.]
The latter (i.e. exclusions) will reduce the size of the clone which will
speed up the clone operation.
.PP
If the plan is to tar/zip up the clone and send it to a remote location on
the internet to debug, then excluding sub\-trees can remove information
about hardware.  This may be important for security reasons if the machine
with the problem holds sensitive data or has special hardware. Linux pseudo
file systems typically don't hold user data, rather they hold metadata (or
data about data).
.PP
When a single invocation uses both the \fI\-\-dereference=SPTSYM\fR and the
\fI\-\-exclude=PATT\fR options, the result is typically what one would
hope for. A good example is cloning procfs as the numbered directories are
process identifiers (PIDs) running on the system at the time of the clone.
Cloning these takes a fair amount of time and space and it is hard to see
how that information could be useful for remote debugging. However (there is
always a 'but') the lsblk utility inspects the /proc/self/mountinfo file
and 'self' is a symbolic link to the PID of the process accessing that file.
So a good approach is to exclude all paths that start with a digit at the
top level (e.g. '/proc/1/') and dereference the symbolic link '/proc/self/'.
The invocation might look like this:
    clone_pseudo_fs \-s /proc \-d /tmp/pr \-e '/proc/[0\-9]*' \-r /proc/self
.PP
For sake of argument assume 'self' is a symbolic link to PID 1234 so that
would be /proc/1234 . But that would match the exclude pattern, do they
cancel out? [The argument to \-e is in single quotes to stop the shell
expanding that glob, in this case this utility expands it.]
.br
No, they do not cancel out, /tmp/pr/1234/* will noT appear but /tmp/pr/self/*
will appear and the '*' will be the same sub\-tree. However something has
been lost: the fact that self's PID was 1234 . Although this may not be
important in this case (i.e. to trick lsblk) it may be important in other
cases. For this reason, clone_pseudo_fs creates a file in the destination
under the \fISPTSYM\fR directory. This file is called
0_symlink_source_target and it contains the source's symbolic link target
name. In this case the contents of that file would be '/proc/1234' .
.SH PRUNING
The term "prune" is used in the positive sense in this utility, basically
the opposite action of what the exclude options do.
.br
When the \fI\-\-prune=PRUN\fR option is given the \fI\-\-cache\fR option
is set implicitly, if it has not been given. The two passes used to
implement the \fI\-\-cache\fR option is expanded to three passes.
.PP
The first pass makes an in\-memory copy of \fISPATH\fR as discussed above.
Each directory's path name is compared to the \fISPRUN\fR argument(s). Any
matches are marked as "exact". In the second pass those exact marks
are propagated up (toward the root) and down (toward the leaf nodes).
The "up" marks form a chain while the down marks are all the children,
grandchildren, etc of the node with the exact mark. Nodes in the "down"
marks that are symlinks are followed.
.PP
Why not propagate the marks in the first pass? Symlinks again! A marked
symlink may be dangling at the point that it is processed in the first
pass but at some point later in the first pass that dangling symlink
may be resolved (i.e. the symlink's target node is created).  Once
the first pass completes no more node will be added or excluded. Note
that symlinks may still be dangling due to exclusions or pointing
outside or to another pseudo file system.
.PP
The third pass only outputs nodes that have been marked.
.SH "ORDER OF EVALUATION"
First command line options are processed. This includes doing "glob" (or
file) expansions for any \fI\-\-exclude=PATT\fR options. Matching
filenames, including their absolute path are consolidated into a
single (sorted) list.
.PP
As a general rule, during the recursive scan (descent) of \fISPATH\fR at
each node the dereference option is applied first, followed by
exclude (both \fI\-\-exclude=PATT\fR and \fI\-\-excl\-fn=EFN\fR options)
and finally the prune option is evaluated.
.PP
There is a difference in the way \fI\-\-exclude=PATT\fR and
\fI\-\-excl\-fn=EFN\fR are evaluated. The \fIPATT\fR argument is turned
into a list of matching node paths before the scan commences. By the
time the scan reaches that part of the hierarchial tree, that node may
have been removed. This happens often in procfs with this option:
    \-\-exclude='/proc/[0-9]*'
which is trying to exclude all PIDs (process IDs). A few may be found in
the output, representing the processes that were created after the glob
expansion of \fIPATT\fR and before the scan reached that part of the
hierarchial tree. To improve performance, whenever an element from the
list of matching node paths is matched, that element is removed from the
list.
.PP
On the other hand, for the \fI\-\-excl\-fn=EFN\fR option, a list of
filenames is generated during command line processing, one list entry
for each \fI\-\-excl\-fn=EFN\fR option appearing on the command line.
.SH "CLONING SYSFS"
An instance of the sysfs file pseudo file system is typically mounted under
the /sys directory in Linux. So many utilities and tools like systemd
expect sysfs in that location that Linux would probably be inoperable if
sysfs is not present at that location.
.PP
The defaults of this utility are chosen so that invoking this utility
without options will clone /sys int /tmp/sys . This will occur whether this
utility is invoked by a root (superuser) or non\-root user. Many of
the "ls*" family of utilities will work without elevated user privileges
so invoking this utility as a non\-root user may be sufficient. Another
advantage of a non\-root clone is that sensitive files under \fISPATH\fR
protected by file permissions will not be cloned and thus will not
appear in the destination under \fIDPATH\fR.
.PP
It seems that all the symlink targets in sysfs stay within sysfs.
Counter\-examples? The other pseudo file systems listed below have symlink
targets outside their file system. For example /proc/self/root is a symlink
which usually targets '/' .
.SH "CLONING PROCFS"
The pseudo file system called procfs is typically mounted under /proc and
primarily contains directories named for the Process Identifiers (PIDs)
currently running in the host machine. It also contains "other stuff" some
of which has been relocated to sysfs over time. [Procfs existed in Linux
before sysfs did.] It is rumoured that more "other stuff" may be migrated
to sysfs in the future.
.PP
An important symlink in the top level directory under /proc is called "self".
It links to PID of the process that read /proc . That process might be
multi\-threaded so there is also a symlink called "threaded\-self". One
might think cloning these PID directories would not be much use for doing
remote debugging but somewhat surprisingly lsblk accesses
/proc/self/mountinfo .
.PP
Those PID directories contain, amongst other things, symlinks representing
every open file descriptor of each PID. Without the default regular
file read length of 256 bytes or a smallish value set with the
\fI\-\-reglen=RLEN\fR option, cloning procfs in full could/would fill
up the file system. Actually just cloning /proc/self itself is probably
sufficient (because this utility maintains an open file descriptor to
\fIDPATH\fR).
.PP
One problematic file is /proc/kmsg which is a "waiting" read. This can
be handled with the \fI\-\-wait=MS_R\fR option. In testing \-\-wait=0
seems to be sufficient. The /proc/kmsg file needs root permissions to read
so if this utility is run as a non\-root user, that problem disappears.
.SH "CLONING DEVFS"
A file system called "devfs" was removed a long time ago in Linux and
replaced by the devtmpfs file system which is typically controlled by the
udevd daemon. For simplicity the name "devfs" will be used here to describe
the file system mounted under /dev .
.PP
The mknod Unix command and a system call of the same name creates 'block'
and 'character' (aka 'char') devices under /dev . Both versions of mknod
need root permissions so that running this utility as a non\-root user
will create a clone/copy with no block or char devices in it. There is
other useful information such as the symlinks under the /dev/block and
/dev/char directories. Those symlinks show a reverse mapping from major
and minor numbers (separated by a ':') to the device node name in their
parent directory. Each symlink link name is the 'major:minor' number and
the symlink target name is the path to the device node name. When this
utility clones /dev as a non\-root user those device node names will not
be present so those symlinks will be "dangling". But it doesn't matter,
the required information about that (reverse mapping) relation is present
in each symlink.
.PP
Devfs has a relatively small number of nodes compared to sysfs and procfs
hence cloning it should be fast with few problems encountered. One thing
to note is that it does contain symlinks to other file systems such as
/dev/core (target: /proc/core ), /dev/initctl (target: /run/initctl) and
stdin/stdout/stderr (targets: /proc/self/fd/0 , 1 and 2) amongst others.
 SH NOTES
Some information about sysfs in Linux follows.
Linux calls the regular files is sysfs "attributes". Linux documentation says
that sysfs attributes (i.e. the contents of those regular files) should
be "ASCII text files, preferably with only one value per file. It is noted
that it may not be efficient to contain only one value per file, so  ...
[longer strings are allowed]". The point is those file contents should be
short with ASCII text. Naturally not all attributes comply.
.PP
There is a practical reason for the \fI\-\-reglen=RLEN\fR option when the
source is sysfs. In this case the file length given by the stat(2) system
call is fictitious (i.e. a lie), usually 4096 or 0. This makes it hard to
pre\-allocate a buffer to receive the data that the read(2) call actually
fetches. There is a statistics counter called "Number of files \fIRLEN\fR
bytes or longer" which may help indicate if the \fIRLEN\fR setting is too low.
.PP
The /proc/kmsg file has been used as an example of a regular file that has
a waiting read. It also has root\-only permissions so if this utility is
being called to clone /proc as a non\-root user, then /proc/kmsg is not an
issue.
.PP
When cloning devfs (i.e. under /dev ) as a non\-root user, no block or
character special file (device) will be created.
.SH EXAMPLES
When cloning procfs, the recursive directory scan will sometimes fail and
exit while scanning one of the "process identify" (PID) directories which
starts with a digit or /proc/self which is a symlink the the clone_pseudo_fs
instance that is executing. The reason is most likely the scan was in a
PID sub\-tree when that PID was removed. While other information in procfs
may be useful getting a snapshot of, processes (task, threads) running when
the clone was taken doesn't seem particularly worthwhile. So here is an
invocation to exclude those PID directories:
    $ clone_pseudo_fs \-\-src=/proc \-\-dst=/tmp/proc
\-\-exclude='/proc/[0\-9]*' \-\-deref=/proc/self \-\-stats
.PP
The first exclude option needs to be surrounded by quotes to stop the shell
doing a glob expansion before clone_pseudo_fs is called. The second exclude
is arguably not needed as its a symlink to a PID directory that has not been
cloned (due to the first exclude). The above invocation will work for a
non\-root user but seem to wait forever when invoked with root permissions.
The reason is that /proc/kmsg is a waiting read. So the following invocation
will work better:
    $ clone_pseudo_fs \-\-src=/proc \-\-dst=/tmp/proc
\-\-exclude='/proc/[0\-9]*' \-\-wait=0 \-\-stats
.PP
Rather than exclude /proc/kmsg explicitly, using \-\-wait=0 will catch
all "waiting" reads. The statistics output will show one source poll timeout
for each waiting read encountered. It is possible that more waiting reads
will be added to procfs in the future.
.PP
The lsblk utility has a \-\-sysroot= option that expects to find both
sysfs and procfs under the argument given to that option. So if
\-\-sysroot=/tmp then lsblk expects to find /tmp/sys and /tmp/proc
appropriately populated. That can be done with this sequence:
    $ clone_pseudo_fs \-\-src=/proc \-\-dst=/tmp/proc
\-\-exclude='/proc/[0\-9]*' \-\-deref=/proc/self \-\-reglen=8192
.PP
    $ clone_pseudo_fs \-\-src=/sys \-\-dst=/tmp/sys
.PP
    $ lsblk \-\-sysroot /tmp
.PP
lsblk is looking for this file: /tmp/proc/self/mouninfo which can be 30 lines
or longer. That is why the \-\-reglen=8192 option is needed and may need
to be larger. That file is needed by lsblk to populate the MOUNTPOINTS
column. Notice that some utilities taking long options that have an
associated argument can optionally take an "=" between the option and its
argument (e.g. this utility) while others don't (e.g. lsblk and lsmem).
.PP
Probably the best examples can be found under the examples directory of
the clone_pseudo_fs source package.
.SH AUTHOR
Written by Douglas Gilbert
.SH "REPORTING BUGS"
Report bugs to <dgilbert at interlog dot com>.
.SH COPYRIGHT
Copyright \(co 2023 Douglas Gilbert
.br
This software is distributed under a BSD\-2\-Clause license. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.B lsscsi(8),
.B lspci(8),
.B lsusb(8),
.B lsblk(8),
.B lsmem(8),
.B lscpu(8),
.B read(2), stat(2) (Linux system calls),
.B C++17 and later: filesystem library
